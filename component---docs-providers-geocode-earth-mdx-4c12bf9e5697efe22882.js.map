{"version":3,"sources":["webpack:///../docs/providers/geocode-earth.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Map","provider","isMDXComponent"],"mappings":"igBAQO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,0BADR,0BAGA,kIACA,qBAAG,sBAAQC,WAAW,KAAnB,QAAH,uDAAmG,mBAAGA,WAAW,KAAQ,CACrH,KAAQ,2BADuF,kBAAnG,wBAGA,6EAA4D,mBAAGA,WAAW,KAAQ,CAC9E,KAAQ,gCADgD,iBAA5D,KAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kCAAqCC,SAAO,GAC7EL,QACAH,kBACAS,eACAC,SAJ6E,gBAK7EV,IAL6E,EAM7EH,eAN6E,GAO5EO,QAAQ,cACb,YAAC,IAAD,CAAKO,SAAS,eAAeP,QAAQ,SAEnC,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,qXAoBL,iBAAQ,CACN,GAAM,uBADR,uBAGA,yEAAwD,mBAAGA,WAAW,KAAQ,CAC1E,KAAQ,gCAD4C,uBAAxD,oDAEqF,0BAAYA,WAAW,KAAvB,UAFrF,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8TAWL,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+M,gNAcTJ,EAAWW,gBAAiB","file":"component---docs-providers-geocode-earth-mdx-4c12bf9e5697efe22882.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/peter/code/missinglink/leaflet-geosearch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Playground from '../components/Playground';\nimport Map from '../components/Map';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"geocode-earth-provider\"\n    }}>{`Geocode Earth Provider`}</h1>\n    <p>{`Geocode Earth is a hosted version of the Pelias provider run by the core maintainers of the FOSS project.`}</p>\n    <p><strong parentName=\"p\">{`note`}</strong>{`: Geocode Earth services require an API key. Grab a `}<a parentName=\"p\" {...{\n        \"href\": \"https://geocode.earth/\"\n      }}>{`free trial key`}</a>{` from their website.`}</p>\n    <p>{`For more options and configurations, see the service `}<a parentName=\"p\" {...{\n        \"href\": \"https://geocode.earth/docs/\"\n      }}>{`documentation`}</a>{`.`}</p>\n    <Playground __position={0} __code={'<Map provider=\\\"GeocodeEarth\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Map,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Map provider=\"GeocodeEarth\" mdxType=\"Map\" />\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { GeocodeEarthProvider } from 'leaflet-geosearch';\n\n// grab an API key from https://geocode.earth\nconst provider = new GeocodeEarthProvider({\n  params: {\n    api_key: '__YOUR_GEOCODE_EARTH_KEY__',\n  },\n});\n\n// add to leaflet\nimport { GeoSearchControl } from 'leaflet-geosearch';\n\nmap.addControl(\n  new GeoSearchControl({\n    provider,\n  }),\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional-parameters\"\n    }}>{`Optional parameters`}</h2>\n    <p>{`Geocode Earth supports a wide range of number of `}<a parentName=\"p\" {...{\n        \"href\": \"https://geocode.earth/docs/\"\n      }}>{`optional parameters`}</a>{` which can be applied to every request using the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const provider = new GeocodeEarthProvider({\n  params: {\n    size: 5, // limit the total number of results returned\n    lang: 'nl', // render results in Dutch\n    'boundary.country': 'NL', // limit search results to the Netherlands\n    layers: 'address,street', // limmit which layers are queried\n  },\n});\n`}</code></pre>\n    <p>{`Or individually on a per-request basis:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const results = await provider.search({\n  query: {\n    text: 'example',\n    'focus.point.lat': 1.11, // score results nearer to the focus point higher\n    'focus.point.lon': 2.22,\n  },\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}