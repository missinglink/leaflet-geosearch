(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{iwLz:function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return s})),r.d(t,"default",(function(){return d}));r("5hJT"),r("W1QL"),r("K/PF"),r("t91x"),r("75LO"),r("PJhk");var a=r("/FXl"),o=r("TjRS"),n=r("KUxS"),c=r("yYOO");r("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/providers/geocode-earth.mdx"}});var p={_frontmatter:s},l=o.a;function d(e){var t,r=e.components,d=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,["components"]);return Object(a.b)(l,i({},p,d,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"geocode-earth-provider"},"Geocode Earth Provider"),Object(a.b)("p",null,"Geocode Earth is a hosted version of the ",Object(a.b)("a",i({parentName:"p"},{href:"%25URL%25/../pelias"}),"Pelias")," provider run by the core maintainers of the FOSS project."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"note"),": Geocode Earth services require an API key, grab a ",Object(a.b)("a",i({parentName:"p"},{href:"https://geocode.earth/"}),"free trial key")," from their website."),Object(a.b)("p",null,"For more options and configurations, see the ",Object(a.b)("a",i({parentName:"p"},{href:"https://geocode.earth/docs/"}),"documentation"),"."),Object(a.b)(n.a,{__position:0,__code:'<Map provider="GeocodeEarth" />',__scope:(t={props:d,DefaultLayout:o.a,Playground:n.a,Map:c.a},t.DefaultLayout=o.a,t._frontmatter=s,t),mdxType:"Playground"},Object(a.b)(c.a,{provider:"GeocodeEarth",mdxType:"Map"})),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-js"}),"import { GeocodeEarthProvider } from 'leaflet-geosearch';\n\n// grab an API key from https://geocode.earth\nconst provider = new GeocodeEarthProvider({\n  params: {\n    api_key: '__YOUR_GEOCODE_EARTH_KEY__',\n  },\n});\n\n// add to leaflet\nimport { GeoSearchControl } from 'leaflet-geosearch';\n\nmap.addControl(\n  new GeoSearchControl({\n    provider,\n  }),\n);\n")),Object(a.b)("h2",{id:"optional-parameters"},"Optional parameters"),Object(a.b)("p",null,"Geocode Earth supports a wide range of number of ",Object(a.b)("a",i({parentName:"p"},{href:"https://geocode.earth/docs/"}),"optional parameters")," which can be applied to every request using the ",Object(a.b)("inlineCode",{parentName:"p"},"params")," object:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-js"}),"const provider = new GeocodeEarthProvider({\n  params: {\n    size: 5, // limit the total number of results returned\n    lang: 'nl', // render results in Dutch\n    'boundary.country': 'NL', // limit search results to the Netherlands\n    layers: 'address,street', // limmit which layers are queried\n  },\n});\n")),Object(a.b)("p",null,"Or individually on a per-request basis:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-js"}),"const results = await provider.search({\n  query: {\n    text: 'example',\n    'focus.point.lat': 1.11, // score results nearer to the focus point higher\n    'focus.point.lon': 2.22,\n  },\n});\n")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/providers/geocode-earth.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-providers-geocode-earth-mdx-0b1e3ed948a0e7b46358.js.map