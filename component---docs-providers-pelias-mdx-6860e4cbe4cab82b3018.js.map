{"version":3,"sources":["webpack:///../docs/providers/pelias.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Map","provider","isMDXComponent"],"mappings":"igBAQO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,qBAAG,mBAAGC,WAAW,KAAQ,CACrB,KAAQ,qCADT,UAAH,8FAGA,0GACA,4BAAW,mBAAGA,WAAW,KAAQ,CAC7B,KAAQ,qCADD,UAAX,sEAGA,gCAAe,mBAAGA,WAAW,KAAQ,CACjC,KAAQ,4CADG,wBAAf,sFAGA,sGACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4BAA+BC,SAAO,GACvEL,QACAH,kBACAS,eACAC,SAJuE,gBAKvEV,IALuE,EAMvEH,eANuE,GAOtEO,QAAQ,cACb,YAAC,IAAD,CAAKO,SAAS,SAASP,QAAQ,SAE7B,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,khBAkBL,iBAAQ,CACN,GAAM,uBADR,uBAGA,kEAAiD,mBAAGA,WAAW,KAAQ,CACnE,KAAQ,wEADqC,uBAAjD,oDAEqF,0BAAYA,WAAW,KAAvB,UAFrF,YAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wTAWL,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+M,yMAcTJ,EAAWW,gBAAiB","file":"component---docs-providers-pelias-mdx-6860e4cbe4cab82b3018.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/peter/code/missinglink/leaflet-geosearch/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Playground from '../components/Playground';\nimport Map from '../components/Map';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"pelias-provider\"\n    }}>{`Pelias Provider`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pelias/pelias\"\n      }}>{`Pelias`}</a>{` is an open-source geocoder powered completely by open data, available freely to everyone.`}</p>\n    <p>{`In order to use this provider you'll need to have your own Pelias server running.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pelias/docker\"\n      }}>{`Docker`}</a>{` repository provides the quickest path to running your own server.`}</p>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pelias/documentation\"\n      }}>{`Pelias documentation`}</a>{` for more detailed information about the available endpoints and query parameters.`}</p>\n    <p>{`Looking for a hosted version of Pelias? check out the Geocode Earth provider.`}</p>\n    <Playground __position={0} __code={'<Map provider=\\\"Pelias\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Map,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Map provider=\"Pelias\" mdxType=\"Map\" />\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { PeliasProvider } from 'leaflet-geosearch';\n\n// Pelias servers are self-hosted so you'll need to configure the 'host' string\n// to identify where requests to your running pelias/api server instance should be sent.\n// note: you SHOULD include the scheme, domain and port but NOT any path or parameters.\nconst provider = new PeliasProvider('http://localhost:4000');\n\n// add to leaflet\nimport { GeoSearchControl } from 'leaflet-geosearch';\n\nmap.addControl(\n  new GeoSearchControl({\n    provider,\n  }),\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"optional-parameters\"\n    }}>{`Optional parameters`}</h2>\n    <p>{`Pelias supports a wide range of number of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pelias/documentation/blob/master/autocomplete.md\"\n      }}>{`optional parameters`}</a>{` which can be applied to every request using the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const provider = new PeliasProvider({\n  params: {\n    size: 5, // limit the total number of results returned\n    lang: 'nl', // render results in Dutch\n    'boundary.country': 'NL', // limit search results to the Netherlands\n    layers: 'address,street', // limmit which layers are queried\n  },\n});\n`}</code></pre>\n    <p>{`Or individually on a per-request basis:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const results = await provider.search({\n  query: {\n    text: 'example',\n    'focus.point.lat': 1.11, // score results nearer to the focus point higher\n    'focus.point.lon': 2.22,\n  },\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}