(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{C5hP:function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return s})),r.d(t,"default",(function(){return c}));r("5hJT"),r("W1QL"),r("K/PF"),r("t91x"),r("75LO"),r("PJhk");var n=r("/FXl"),o=r("TjRS");r("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/providers/custom-providers.mdx"}});var i={_frontmatter:s},p=o.a;function c(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,["components"]);return Object(n.b)(p,a({},i,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"custom-providers"},"Custom Providers"),Object(n.b)("p",null,"It's possible to create your own providers either by creating one from scratch, or extending an existing one."),Object(n.b)("p",null,"The most trivial one to extend, is the ",Object(n.b)("a",a({parentName:"p"},{href:"/providers/openstreetmap"}),"OpenStreetMap")," provider. As Nominatim is open source, and can be self hosted, the provider allows for easy extension."),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-js"}),"import { OpenStreetMapProvider } from 'leaflet-geosearch';\n\nclass MyProvider extends OpenStreetMapProvider {\n  constructor(options) {\n    super({\n      ...options,\n      searchUrl: 'https://example.com/api/search',\n      reverseUrl: 'https://example.com/api/reverse',\n    });\n  }\n}\n")),Object(n.b)("p",null,"When the constructor is the only thing you need to override, it might be sufficient to provide the options during initialization:"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-js"}),"const provider = new OpenStreetMapProvider({\n  searchUrl: 'https://example.com/api/search',\n  reverseUrl: 'https://example.com/api/reverse',\n});\n")),Object(n.b)("p",null,"However, custom providers can be easier to share, and have a single source of truth. As you don't need to manage the URL's on various places throughout your codebase."),Object(n.b)("h2",{id:"custom-server-response"},"Custom Server Response"),Object(n.b)("p",null,"When you need to adjust the provider to support a different json data shape, you might want to override more than just the urls."),Object(n.b)("p",null,"The",Object(n.b)("inlineCode",{parentName:"p"},"parse")," method allows you to transform the server response, to the SearchResult types."),Object(n.b)("p",null,"The ",Object(n.b)("inlineCode",{parentName:"p"},"endpoint")," method is there to select the correct endpoint, based on the search parameters."),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-js"}),"import { JsonProvider } from 'leaflet-geosearch';\n\nclass MyProvider extends JsonProvider {\n  endpoint({ query, type }) {\n    // Result: https://example.com/api/search?q=some%20address&f=json\n    return this.getUrl('https://example.com/api/search', {\n      q: query,\n      f: 'json',\n    });\n  }\n\n  parse({ data }) {\n    // Note that `data` is the raw result returned by the server. This\n    // method should return data in the SearchResult format.\n    return data.map((x) => ({\n      x: data.x,\n      y: data.y,\n      label: data.label,\n      bounds: data.bounds,\n    }));\n  }\n}\n")),Object(n.b)("h2",{id:"sharing"},"Sharing"),Object(n.b)("p",null,"When you've build a custom provider that can be used by others, please consider opening a ",Object(n.b)("a",a({parentName:"p"},{href:"https://github.com/smeijer/leaflet-geosearch"}),"pull-request"),", or publishing it to ",Object(n.b)("inlineCode",{parentName:"p"},"npm"),"."))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/providers/custom-providers.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-providers-custom-providers-mdx-cb0f87b097ee292a90d3.js.map