(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{A4eJ:function(e,t,r){"use strict";r.r(t),r.d(t,"_frontmatter",(function(){return s})),r.d(t,"default",(function(){return u}));r("5hJT"),r("W1QL"),r("K/PF"),r("t91x"),r("75LO"),r("PJhk");var a=r("/FXl"),n=r("TjRS"),o=r("KUxS"),i=r("yYOO");r("aD51");function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/providers/pelias.mdx"}});var p={_frontmatter:s},c=n.a;function u(e){var t,r=e.components,u=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,["components"]);return Object(a.b)(c,l({},p,u,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"pelias-provider"},"Pelias Provider"),Object(a.b)("p",null,Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/pelias/pelias"}),"Pelias")," is an open-source geocoder powered completely by open data, available freely to everyone."),Object(a.b)("p",null,"In order to use this provider you'll need to have your own Pelias server running."),Object(a.b)("p",null,"The ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/pelias/docker"}),"Docker")," repository provides the quickest path to running your own server."),Object(a.b)("p",null,"See the ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/pelias/documentation"}),"Pelias documentation")," for more detailed information about the endpoints and query parameters."),Object(a.b)(o.a,{__position:0,__code:'<Map provider="Pelias" />',__scope:(t={props:u,DefaultLayout:n.a,Playground:o.a,Map:i.a},t.DefaultLayout=n.a,t._frontmatter=s,t),mdxType:"Playground"},Object(a.b)(i.a,{provider:"Pelias",mdxType:"Map"})),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"import { PeliasProvider } from 'leaflet-geosearch';\n\nconst provider = new PeliasProvider('http://localhost:4000');\n\n// add to leaflet\nimport { GeoSearchControl } from 'leaflet-geosearch';\n\nmap.addControl(\n  new GeoSearchControl({\n    provider,\n  }),\n);\n")),Object(a.b)("h2",{id:"optional-parameters"},"Optional parameters"),Object(a.b)("p",null,"Pelias supports a wide range of number of ",Object(a.b)("a",l({parentName:"p"},{href:"https://github.com/pelias/documentation/blob/master/autocomplete.md"}),"optional parameters")," which can be applied to every request using the ",Object(a.b)("inlineCode",{parentName:"p"},"params")," object:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"const provider = new PeliasProvider({\n  params: {\n    'size': 5,                    // limit the total number of results returned\n    'lang': 'nl',                 // render results in Dutch\n    'boundary.country': 'NL',     // limit search results to the Netherlands\n    'layers': 'address,street'    // limmit which layers are queried\n  },\n});\n")),Object(a.b)("p",null,"Or individually on a per-request basis:"),Object(a.b)("pre",null,Object(a.b)("code",l({parentName:"pre"},{className:"language-js"}),"const results = await provider.search({ query: {\n  'text': 'example',\n  'focus.point.lat': 1.11,        // score results nearer to the focus point higher\n  'focus.point.lon': 2.22\n} });\n")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/providers/pelias.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-providers-pelias-mdx-2001993b2ee69f31b829.js.map